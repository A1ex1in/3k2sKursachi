------------------------------------------------------------------------------------------------------------------------------------------------------------------
--таблицы
------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE TABLE "keys" (
  "id_client" bigint,
  "keyy" text
);

CREATE TABLE "adres_filial" (
  "id_adres_filial" bigint PRIMARY KEY,
  "country" text,
  "city" text,
  "street" text,
  "house" bigint,
  "post_index" bigint
);

CREATE TABLE "type_operation" (
  "id_type_operation" bigint PRIMARY KEY,
  "nam" text
);

CREATE TABLE "type_schet" (
  "id_type_schet" bigint PRIMARY KEY,
  "nam" text
);

CREATE TABLE "state_schet" (
  "id_state_schet" bigint PRIMARY KEY,
  "sost" text
);

CREATE TABLE "valut" (
  "id_valut" bigint PRIMARY KEY,
  "nam" text
);

CREATE TABLE "state_zayavka" (
  "id_state_zayavka" bigint PRIMARY KEY,
  "sost" text
);

CREATE TABLE "adres_client" (
  "id_adres_client" bigint PRIMARY KEY,
  "country" text,
  "city" text,
  "street" text,
  "house" bigint,
  "apartment" bigint
);

CREATE TABLE "client" (
  "id_client" bigint PRIMARY KEY,
  "id_adres_client" bigint,
  "fam" text,
  "nam" text,
  "otch" text,
  "passport" text,
  "numb" bigint
);

CREATE TABLE "zayavka" (
  "id_zayavka" bigint PRIMARY KEY,
  "id_client" bigint,
  "id_state_zayavka" bigint
);

CREATE TABLE "filial" (
  "id_filial" bigint PRIMARY KEY,
  "id_adres_filial" bigint,
  "nam" text
);

CREATE TABLE "schet" (
  "id_schet" bigint PRIMARY KEY,
  "id_client" bigint,
  "id_type_schet" bigint,
  "id_valut" bigint,
  "id_state_schet" bigint,
  "id_filial" bigint,
  "summ" bigint
);

CREATE TABLE "operations_schet" (
  "id_operation" bigint PRIMARY KEY,
  "id_schet" bigint,
  "id_type_operation" bigint,
  "summ" bigint
);
------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------
--связи
------------------------------------------------------------------------------------------------------------------------------------------------------------------
ALTER TABLE "client" ADD FOREIGN KEY ("id_adres_client") REFERENCES "adres_client" ("id_adres_client");

ALTER TABLE "zayavka" ADD FOREIGN KEY ("id_client") REFERENCES "client" ("id_client");

ALTER TABLE "zayavka" ADD FOREIGN KEY ("id_state_zayavka") REFERENCES "state_zayavka" ("id_state_zayavka");

ALTER TABLE "filial" ADD FOREIGN KEY ("id_adres_filial") REFERENCES "adres_filial" ("id_adres_filial");

ALTER TABLE "schet" ADD FOREIGN KEY ("id_client") REFERENCES "client" ("id_client");

ALTER TABLE "schet" ADD FOREIGN KEY ("id_type_schet") REFERENCES "type_schet" ("id_type_schet");

ALTER TABLE "schet" ADD FOREIGN KEY ("id_valut") REFERENCES "valut" ("id_valut");

ALTER TABLE "schet" ADD FOREIGN KEY ("id_state_schet") REFERENCES "state_schet" ("id_state_schet");

ALTER TABLE "schet" ADD FOREIGN KEY ("id_filial") REFERENCES "filial" ("id_filial");

ALTER TABLE "operations_schet" ADD FOREIGN KEY ("id_schet") REFERENCES "schet" ("id_schet");

ALTER TABLE "operations_schet" ADD FOREIGN KEY ("id_type_operation") REFERENCES "type_operation" ("id_type_operation");
------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------
--триггеры
------------------------------------------------------------------------------------------------------------------------------------------------------------------
--Триггер для автоматического обновления суммы счёта при внесении операций
CREATE OR REPLACE FUNCTION test1()
RETURNS TRIGGER AS $$
DECLARE
    var_summ DECIMAL;
BEGIN
    SELECT summ INTO var_summ
    FROM schet
    WHERE id_schet = NEW.id_schet;
    
    IF NEW.id_type_operation = 0 THEN
        var_summ := var_summ - NEW.summ;
    ELSE
        var_summ := var_summ + NEW.summ;
    END IF;
    
    UPDATE schet
    SET summ = var_summ
    WHERE id_schet = NEW.id_schet;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigtest1
AFTER INSERT ON operations_schet
FOR EACH ROW
EXECUTE FUNCTION test1();

--Триггер для предотвращения удаления клиента с активными счетами
CREATE OR REPLACE FUNCTION test2()
RETURNS TRIGGER AS $$
DECLARE
	active_count INTEGER;
BEGIN
	SELECT COUNT(*) INTO active_count
	FROM schet
	WHERE id_client = OLD.id_client AND id_state_schet = 1;
	
	IF active_count > 0 THEN
        RAISE EXCEPTION 'Cannot delete client with active accounts';
    END IF;
	RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigtest2
BEFORE DELETE ON client
FOR EACH ROW
EXECUTE FUNCTION test2();

--Триггер для шифрования паспорта с генерацией ключа, и записью этого ключа в таблицу keys
CREATE EXTENSION IF NOT EXISTS pgcrypto;

CREATE OR REPLACE FUNCTION test3()
RETURNS TRIGGER AS $$
DECLARE
    key text;
BEGIN
    key := gen_random_uuid()::text;
    NEW.passport := pgp_sym_encrypt(NEW.passport, key);
    INSERT INTO keys (id_client, keyy) VALUES (NEW.id_client, key);

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigtest3
BEFORE INSERT OR UPDATE ON client
FOR EACH ROW
EXECUTE FUNCTION test3();

--Функция для расшифрования шифрования паспорта
CREATE OR REPLACE FUNCTION decrypt_passport(client_id int)
RETURNS text AS $$
DECLARE
    encrypted_passport text;
    decryption_key text;
    decrypted_passport text;
BEGIN
    SELECT c.passport INTO encrypted_passport FROM client c WHERE c.id_client = client_id;
    SELECT k.keyy INTO decryption_key FROM keys k WHERE k.id_client = client_id;
    decrypted_passport := pgp_sym_decrypt(encrypted_passport::bytea, decryption_key);
    RETURN decrypted_passport;
END;
$$ LANGUAGE plpgsql;

--SELECT decrypt_passport(1);

--Триггер для предотвращения отрицательного баланса на счете
CREATE OR REPLACE FUNCTION test4()
RETURNS TRIGGER AS $$
DECLARE
    current_balance DECIMAL;
BEGIN
    SELECT summ INTO current_balance
    FROM schet
    WHERE id_schet = NEW.id_schet;
	
    IF NEW.id_type_operation = 0 AND (current_balance - NEW.summ) < 0 THEN
        RAISE EXCEPTION 'Операция не может быть выполнена: отрицательный баланс на счете.';
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigtest4
BEFORE INSERT ON operations_schet
FOR EACH ROW
EXECUTE FUNCTION test4();

--Триггер для проверки существования клиента при добавлении нового счета
CREATE OR REPLACE FUNCTION test5()
RETURNS TRIGGER AS $$
DECLARE
    client_exists BOOLEAN;
BEGIN
	SELECT EXISTS(SELECT 1 FROM client WHERE id_client = NEW.id_client) INTO client_exists;

    IF NOT client_exists THEN
        RAISE EXCEPTION 'Client with id % does not exist.', NEW.id_client;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigtest5
BEFORE INSERT ON schet
FOR EACH ROW
EXECUTE FUNCTION test5();

--Триггер для предотвращения вставки операции на закрытом счете
CREATE OR REPLACE FUNCTION test6()
RETURNS TRIGGER AS $$
DECLARE
    account_state INT;
BEGIN
	SELECT id_state_schet INTO account_state
    FROM schet
    WHERE id_schet = NEW.id_schet;
	
	IF account_state = 0 THEN
        RAISE EXCEPTION 'Operation cannot be performed on a closed account with id %.', NEW.id_schet;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigtest6
BEFORE INSERT ON operations_schet
FOR EACH ROW
EXECUTE FUNCTION test6();

--Триггер для ограничения количества счетов у одного клиента
CREATE OR REPLACE FUNCTION test7()
RETURNS TRIGGER AS $$
DECLARE
    account_count INT;
    max_accounts INT := 3;
BEGIN
	SELECT COUNT(*) INTO account_count
    FROM schet
    WHERE id_client = NEW.id_client;
	
	IF account_count >= max_accounts THEN
        RAISE EXCEPTION 'Client with id % already has the maximum number of accounts (%).', NEW.id_client, max_accounts;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigtest7
BEFORE INSERT ON schet
FOR EACH ROW
EXECUTE FUNCTION test7();
------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------
--запросы
------------------------------------------------------------------------------------------------------------------------------------------------------------------
--Получить список всех зарегистрированных в системе клиентов, имеющих задолженность по кредиту
SELECT c.*
FROM client c
JOIN schet s ON c.id_client = s.id_client
WHERE s.summ != 0;
--Проверить статус заявки на кредит для определённого клиента
SELECT z.*, sz.sost AS status_zayavki
FROM zayavka z
JOIN state_zayavka sz ON z.id_state_zayavka = sz.id_state_zayavka
WHERE z.id_client = 1;
--Посмотреть все заявки на кредит ожидающие одобрения
SELECT z.*
FROM zayavka z
WHERE z.id_state_zayavka = 7;
--Проверить историю выдачи кредитов для конкретного клиента (переделать чтобы можно было для любого клиента а не только для 1)
SELECT s.*
FROM schet s
WHERE s.id_client = 1;
--Получить список всех открытых кредитов
SELECT s.*
FROM schet s
WHERE s.id_state_schet = 1;
--Посмотреть список отказанных заявок на кредит
SELECT z.*
FROM zayavka z
WHERE (z.id_state_zayavka = 6 OR z.id_state_zayavka = 9)
--Получить общую сумму всех открытых кредитов
SELECT SUM(s.summ) AS total_open_credit_sum
FROM schet s
WHERE s.id_state_schet = 1;
--Проверить текущий баланс по кредитным счетам клиента
SELECT s.id_schet, s.summ
FROM schet s
WHERE s.id_client = 1;
------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------
--роли
------------------------------------------------------------------------------------------------------------------------------------------------------------------
create role cliet;
create role administrator;
create role menedjer;


CREATE USER ivanov_login WITH LOGIN PASSWORD 'p1';
GRANT cliet TO ivanov_login;
CREATE USER u2 WITH LOGIN PASSWORD 'p2';
GRANT administrator TO u2;
CREATE USER u3 WITH LOGIN PASSWORD 'p3';
GRANT menedjer TO u3;
------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------
--заполнение таблиц
------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Заполнение таблицы "adres_filial"
INSERT INTO "adres_filial" ("id_adres_filial", "country", "city", "street", "house", "post_index") VALUES
(1, 'Россия', 'Москва', 'Ленина', 1, 123456),
(2, 'Россия', 'Санкт-Петербург', 'Невский', 2, 234567),
(3, 'Россия', 'Казань', 'Кремлевская', 3, 345678),
(4, 'Россия', 'Сочи', 'Курортный', 4, 456789),
(5, 'Россия', 'Екатеринбург', 'Малышева', 5, 567890),
(6, 'Россия', 'Новосибирск', 'Кирова', 6, 678901),
(7, 'Россия', 'Владивосток', 'Светланская', 7, 789012),
(8, 'Россия', 'Нижний Новгород', 'Большая Покровская', 8, 890123),
(9, 'Россия', 'Ростов-на-Дону', 'Пушкинская', 9, 901234),
(10, 'Россия', 'Самара', 'Максима Горького', 10, 101234);

-- Заполнение таблицы "type_operation"
INSERT INTO "type_operation" ("id_type_operation", "nam") VALUES
(0, 'Снятие'), (1, 'Пополнение');

-- Заполнение таблицы "type_schet"
INSERT INTO "type_schet" ("id_type_schet", "nam") VALUES
(1, 'быстрый'), (2, 'долгосрочный');

-- Заполнение таблицы "state_schet"
INSERT INTO "state_schet" ("id_state_schet", "sost") VALUES
(0, 'Закрыт'), (1, 'Открыт');

-- Заполнение таблицы "valut"
INSERT INTO "valut" ("id_valut", "nam") VALUES
(1, 'RUB'), (2, 'USD'), (3, 'EUR'), (4, 'GBP'), (5, 'JPY'),
(6, 'CNY'), (7, 'INR'), (8, 'CAD'), (9, 'AUD'), (10, 'CHF');

-- Заполнение таблицы "state_zayavka"
INSERT INTO "state_zayavka" ("id_state_zayavka", "sost") VALUES
(1, 'Новая'), (2, 'В обработке'), (3, 'Завершена'), (4, 'Отменена'), (5, 'На удержании'),
(6, 'Отклонена'), (7, 'В ожидании'), (8, 'Одобрена'), (9, 'Отклонена'), (10, 'Закрыта');

-- Заполнение таблицы "adres_client"
INSERT INTO "adres_client" ("id_adres_client", "country", "city", "street", "house", "apartment") VALUES
(1, 'Россия', 'Москва', 'Тверская', 1, 10),
(2, 'Россия', 'Санкт-Петербург', 'Лиговский', 2, 20),
(3, 'Россия', 'Казань', 'Баумана', 3, 30),
(4, 'Россия', 'Сочи', 'Ривьера', 4, 40),
(5, 'Россия', 'Екатеринбург', 'Высоцкого', 5, 50),
(6, 'Россия', 'Новосибирск', 'Ленина', 6, 60),
(7, 'Россия', 'Владивосток', 'Океанский', 7, 70),
(8, 'Россия', 'Нижний Новгород', 'Горького', 8, 80),
(9, 'Россия', 'Ростов-на-Дону', 'Донская', 9, 90),
(10, 'Россия', 'Самара', 'Самарская', 10, 100);

-- Заполнение таблицы "client"
INSERT INTO "client" ("id_client", "id_adres_client", "fam", "nam", "otch", "passport", "numb") VALUES
(1, 1, 'Иванов', 'Иван', 'Иванович', '1234567890', 8901234567),
(2, 2, 'Петров', 'Петр', 'Петрович', '2345678901', 8902345678),
(3, 3, 'Сидоров', 'Сидор', 'Сидорович', '3456789012', 8903456789),
(4, 4, 'Смирнов', 'Сергей', 'Сергеевич', '4567890123', 8904567890),
(5, 5, 'Кузнецов', 'Алексей', 'Алексеевич', '5678901234', 8905678901),
(6, 6, 'Попов', 'Андрей', 'Андреевич', '6789012345', 8906789012),
(7, 7, 'Васильев', 'Владимир', 'Владимирович', '7890123456', 8907890123),
(8, 8, 'Зайцев', 'Дмитрий', 'Дмитриевич', '8901234567', 8908901234),
(9, 9, 'Ковалев', 'Юрий', 'Юрьевич', '9012345678', 8909012345),
(10, 10, 'Орлов', 'Михаил', 'Михайлович', '1012345678', 8901012345);

-- Заполнение таблицы "zayavka"
INSERT INTO "zayavka" ("id_zayavka", "id_client", "id_state_zayavka") VALUES
(1, 1, 1), (2, 2, 2), (3, 3, 3), (4, 4, 4), (5, 5, 5),
(6, 6, 6), (7, 7, 7), (8, 8, 8), (9, 9, 9), (10, 10, 10);

-- Заполнение таблицы "filial"
INSERT INTO "filial" ("id_filial", "id_adres_filial", "nam") VALUES
(1, 1, 'Филиал в Москве'), (2, 2, 'Филиал в Санкт-Петербурге'), (3, 3, 'Филиал в Казани'),
(4, 4, 'Филиал в Сочи'), (5, 5, 'Филиал в Екатеринбурге'), (6, 6, 'Филиал в Новосибирске'),
(7, 7, 'Филиал во Владивостоке'), (8, 8, 'Филиал в Нижнем Новгороде'), (9, 9, 'Филиал в Ростове-на-Дону'),
(10, 10, 'Филиал в Самаре');

-- Заполнение таблицы "schet"
INSERT INTO "schet" ("id_schet", "id_client", "id_type_schet", "id_valut", "id_state_schet", "id_filial", "summ") VALUES
(1, 1, 1, 1, 1, 1, 10000), (2, 2, 2, 2, 1, 2, 20000), (3, 3, 1, 3, 1, 3, 30000),
(4, 4, 1, 4, 1, 4, 40000), (5, 5, 2, 5, 1, 5, 50000), (6, 6, 1, 6, 1, 6, 60000),
(7, 7, 1, 7, 1, 7, 70000), (8, 8, 2, 8, 1, 8, 80000), (9, 9, 1, 9, 1, 9, 90000),
(10, 10, 1, 10, 1, 10, 100000);

-- Заполнение таблицы "operations_schet"
INSERT INTO "operations_schet" ("id_operation", "id_schet", "id_type_operation", "summ") VALUES
(1, 1, 0, 1000), (2, 2, 0, 2000), (3, 3, 0, 3000), (4, 4, 0, 4000), (5, 5, 0, 5000),
(6, 6, 1, 6000), (7, 7, 1, 7000), (8, 8, 1, 8000), (9, 9, 1, 9000), (10, 10, 1, 10000);
------------------------------------------------------------------------------------------------------------------------------------------------------------------